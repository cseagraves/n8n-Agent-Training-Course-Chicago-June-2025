name: Convert README to PDF

permissions:
  contents: write

on:
  push:
    branches: [ main, master ]
    paths: [ 'README.md' ]
  workflow_dispatch:

jobs:
  convert-to-pdf:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Pandoc and wkhtmltopdf
      run: |
        sudo apt-get update
        sudo apt-get install -y pandoc wkhtmltopdf

    - name: Download GitHub Markdown CSS
      run: |
        curl -sSL https://cdnjs.cloudflare.com/ajax/libs/github-markdown-css/5.5.1/github-markdown.min.css -o github-markdown.css

    - name: Download Twemoji library locally
      run: |
        # Download Twemoji from a reliable CDN
        curl -sSL https://unpkg.com/twemoji@latest/dist/twemoji.min.js -o twemoji.min.js || \
        curl -sSL https://cdn.jsdelivr.net/npm/twemoji@latest/dist/twemoji.min.js -o twemoji.min.js || \
        curl -sSL https://cdnjs.cloudflare.com/ajax/libs/twemoji/14.0.2/twemoji.min.js -o twemoji.min.js
        
        # Verify the file was downloaded
        if [ ! -f "twemoji.min.js" ]; then
          echo "Failed to download Twemoji, creating fallback..."
          # Create a minimal fallback that won't break the PDF generation
          echo "console.log('Twemoji not available');" > twemoji.min.js
        fi

    - name: Create enhanced CSS with emoji support
      run: |
        cat <<EOF > readme-print.css
        @media print {
          body { margin: 0; }
          .markdown-body { box-shadow: none; border: none; max-width: 100%; padding: 0; }
          img { max-width: 100%; height: auto; }
        }

        /* Emoji styling for Twemoji images */
        img.emoji {
          height: 1.2em;
          width: 1.2em;
          margin: 0 .05em 0 .1em;
          vertical-align: -0.1em;
          display: inline-block;
        }

        /* Enhanced emoji font support for Unicode emojis */
        .markdown-body {
          font-family: -apple-system, BlinkMacSystemFont, "Segoe UI", "Liberation Sans", Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Noto Color Emoji";
        }
        EOF

    - name: Convert README.md to HTML using Pandoc with GitHub style
      run: |
        pandoc README.md \
          --from gfm \
          --to html5 \
          --standalone \
          --css github-markdown.css \
          --css .github/workflows/emoji-font.css \
          --css readme-print.css \
          --metadata title="" \
          --output README.html

    - name: Add Twemoji support to HTML
      run: |
        # Create a temporary HTML file with Twemoji support
        cat <<'EOF' > temp_header.html
        <!DOCTYPE html>
        <html>
        <head>
          <meta charset="UTF-8">
          <link rel="stylesheet" href="github-markdown.css">
          <link rel="stylesheet" href=".github/workflows/emoji-font.css">
          <link rel="stylesheet" href="readme-print.css">
          <style>
            img.emoji {
              height: 1.2em;
              width: 1.2em;
              margin: 0 .05em 0 .1em;
              vertical-align: -0.1em;
              display: inline-block;
            }
          </style>
        </head>
        <body class="markdown-body">
        EOF

        cat <<'EOF' > temp_footer.html
        <script src="twemoji.min.js"></script>
        <script>
          window.onload = function () {
            if (typeof twemoji !== 'undefined') {
              twemoji.parse(document.body, {
                folder: 'svg',
                ext: '.svg'
              });
            }
          }
        </script>
        </body>
        </html>
        EOF

        # Extract body content from pandoc output and wrap with Twemoji support
        sed -n '/<body[^>]*>/,/<\/body>/p' README.html | sed '1d;$d' > temp_body.html
        
        # Combine header, body, and footer
        cat temp_header.html temp_body.html temp_footer.html > README.html
        
        # Clean up temporary files
        rm temp_header.html temp_body.html temp_footer.html

    - name: Convert HTML to PDF
      run: |
        wkhtmltopdf \
          --enable-local-file-access \
          --javascript-delay 3000 \
          --load-error-handling ignore \
          --load-media-error-handling ignore \
          --margin-top 25mm \
          --margin-bottom 25mm \
          --margin-left 20mm \
          --margin-right 20mm \
          --page-size Letter \
          --enable-javascript \
          --no-stop-slow-scripts \
          README.html \
          AI-Agent-Real-Estate-Workshop-Guide.pdf

    - name: Check if PDF was created
      run: |
        if [ -f "AI-Agent-Real-Estate-Workshop-Guide.pdf" ]; then
          echo "‚úÖ PDF successfully created"
          ls -la "AI-Agent-Real-Estate-Workshop-Guide.pdf"
        else
          echo "‚ùå PDF creation failed"
          exit 1
        fi

    - name: Commit and push PDF
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"

        # Add the PDF file
        git add "AI-Agent-Real-Estate-Workshop-Guide.pdf"

        # Check if there are changes to commit
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "üìÑ Auto-update: Convert README to PDF [skip ci]"
          git push
        fi

    - name: Upload PDF as artifact
      uses: actions/upload-artifact@v4
      with:
        name: workshop-guide-pdf
        path: "AI-Agent-Real-Estate-Workshop-Guide.pdf"
        retention-days: 90